USE TEMPDB;

-- CREATING TABLE
CREATE TABLE products ( 
	id INT PRIMARY KEY AUTO_INCREMENT, 
    category VARCHAR(255) NOT NULL,
    name VARCHAR(150), 
    mrp DECIMAL(10, 2) NOT NULL, 
    discount_percent DECIMAL(5, 2) DEFAULT 0, 
    available_quantity INT DEFAULT 0,
    discounted_selling_price DECIMAL(10, 2), 
    weight_in_gms DECIMAL(8, 2), 
    out_of_stock BOOLEAN, 
    quantity INT DEFAULT 0, 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP );

-- DATA EXPLORATION

-- View table structure
DESCRIBE PRODUCTS;

-- View indexes
SHOW INDEX FROM PRODUCTS;

-- Count total records
SELECT COUNT(*) as total_records FROM PRODUCTS;

-- View first 10 records
SELECT * FROM PRODUCTS LIMIT 10;

-- View last 10 records
SELECT * FROM PRODUCTS ORDER BY id DESC LIMIT 10;

-- Random sample of data
SELECT * FROM PRODUCTS ORDER BY RAND() LIMIT 10;

-- Check for NULL values in each column
SELECT
	SUM(CASE WHEN ID IS NULL THEN 1 ELSE 0 END) AS NULL_IDS,
    SUM(CASE WHEN CATEGORY IS NULL THEN 1 ELSE 0 END) AS NULL_CATEGORY,
	SUM(CASE WHEN MRP IS NULL THEN 1 ELSE 0 END) as NULL_MRP,
    SUM(CASE WHEN DISCOUNT_PERCENT IS NULL THEN 1 ELSE 0 END) as NULL_DISCOUNT,
    SUM(CASE WHEN available_quantity IS NULL THEN 1 ELSE 0 END) as NULL_AVAILQTY,
    SUM(CASE WHEN WEIGHT_IN_GMS IS NULL THEN 1 ELSE 0 END) as NULL_WEIGHT
FROM PRODUCTS;

-- Identify rows with zero MRP or discounted selling price

SELECT *
FROM PRODUCTS 
WHERE mrp = 0 
   OR mrp IS NULL 
   OR discounted_selling_price = 0 
   OR discounted_selling_price IS NULL;
   
-- Delete rows with zero MRP or discounted selling price

DELETE FROM PRODUCTS 
WHERE mrp = 0 
   OR mrp IS NULL 
   OR discounted_selling_price = 0 
   OR discounted_selling_price IS NULL;

-- Check data ranges
SELECT
	MIN(MRP) AS MIN_MRP,
	MAX(MRP) AS MAX_MRP,
    MIN(DISCOUNT_PERCENT) AS MIN_DISCOUNT,
    MAX(DISCOUNT_PERCENT) AS MAX_DISCOUNT,
    MIN(AVAILABLE_QUANTITY) AS MIN_AVAILQTY,
    MAX(AVAILABLE_QUANTITY) AS MAX_AVAILQTY
FROM PRODUCTS;

-- Unique categories
SELECT 
	DISTINCT CATEGORY AS D_CATEGORY
FROM PRODUCTS;

-- Category distribution
SELECT 
    CATEGORY, 
    COUNT(*) as product_count,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM PRODUCTS), 1) as percentage
FROM PRODUCTS 
GROUP BY CATEGORY
ORDER BY product_count DESC;

-- Out of stock analysis by category
SELECT 
    CATEGORY,
    COUNT(*) as total_products,
    SUM(CASE WHEN OUT_OF_STOCK = TRUE THEN 1 ELSE 0 END) as out_of_stock_count,
    ROUND(SUM(CASE WHEN OUT_OF_STOCK = TRUE THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 1) as out_of_stock_percentage
FROM PRODUCTS 
GROUP BY CATEGORY
ORDER BY total_products DESC;

-- Summary for MRP

SELECT 
    COUNT(*) as count,
    AVG(mrp) as mean,
    MIN(mrp) as min,
    MAX(mrp) as max,
    STDDEV(mrp) as std_dev,
    AVG(CASE WHEN mrp IS NOT NULL THEN mrp END) as median_approx
FROM PRODUCTS;

-- Price distribution by ranges
SELECT 
    CASE 
        WHEN mrp BETWEEN 1000 AND 5000 THEN '1000-5000'
        WHEN mrp BETWEEN 5001 AND 10000 THEN '5001-10000'
        WHEN mrp BETWEEN 10001 AND 25000 THEN '10001-25000'
        ELSE 'Above 25000'
    END as price_range,
    COUNT(*) as count,
    ROUND(AVG(mrp), 1) as avg_mrp_in_range
FROM PRODUCTS 
GROUP BY PRICE_RANGE
ORDER BY MIN(mrp);

-- Discount vs Price relationship
SELECT 
    CASE 
        WHEN discount_percent = 0 THEN 'No Discount'
        WHEN discount_percent <= 10 THEN 'Low (1-10%)'
        WHEN discount_percent <= 25 THEN 'Medium (11-25%)'
        ELSE 'High (>25%)'
    END as discount_category,
    COUNT(*) as count,
    ROUND(AVG(mrp), 2) as avg_mrp,
    ROUND(AVG(discount_percent), 2) as avg_discount
FROM PRODUCTS 
GROUP BY discount_category
ORDER BY COUNT DESC;

-- Category vs Average Price Analysis

SELECT
	CATEGORY,
    COUNT(*) AS PRODUCT_COUNT,
    ROUND(AVG(MRP), 1) AS AVG_MRP,
    ROUND(AVG(DISCOUNT_PERCENT), 1) AS AVG_DISCOUNT,
    ROUND(AVG(WEIGHT_IN_GMS), 1) AS AVG_WEIGHT,
    SUM(AVAILABLE_QUANTITY) AS TOTAL_INVENTORY
FROM PRODUCTS
GROUP BY CATEGORY
ORDER BY AVG_MRP DESC;

-- Top 10 most expensive products by selling price

SELECT DISTINCT NAME, MRP, DISCOUNT_PERCENT, 
       ROUND(mrp * (1 - DISCOUNT_PERCENT/100), 1) as SELLING_PRICE
FROM PRODUCTS 
ORDER BY SELLING_PRICE DESC 
LIMIT 10;

-- Products with highest discount amounts

SELECT DISTINCT NAME, MRP, DISCOUNT_PERCENT,
       ROUND(mrp * DISCOUNT_PERCENT/100, 2) as DISCOUNT_AMOUNT,
       ROUND(mrp * (1 - DISCOUNT_PERCENT/100), 2) as SELLING_PRICE
FROM PRODUCTS 
ORDER BY DISCOUNT_AMOUNT DESC 
LIMIT 10;

-- Inventory value by category

SELECT 
    category,
    SUM(AVAILABLE_QUANTITY) as TOTAL_QUANTITY,
    ROUND(SUM(mrp * AVAILABLE_QUANTITY), 2) as TOTAL_MRP_VALUE,
    ROUND(SUM(mrp * (1 - DISCOUNT_PERCENT/100) * AVAILABLE_QUANTITY), 2) as TOTAL_SELLING_VALUE
FROM PRODUCTS 
GROUP BY CATEGORY 
ORDER BY TOTAL_SELLING_VALUE DESC;

-- 1. Which categories generate the highest revenue potential?
SELECT 
    CATEGORY,
    COUNT(*) AS PRODUCT_COUNT,
    ROUND(SUM(MRP * AVAILABLE_QUANTITY), 2) AS TOTAL_MRP_VALUE,
    ROUND(SUM(MRP * (1 - DISCOUNT_PERCENT/100) * AVAILABLE_QUANTITY), 2) AS TOTAL_SELLING_VALUE,
    ROUND(AVG(MRP), 2) AS AVG_PRODUCT_PRICE
FROM PRODUCTS
WHERE AVAILABLE_QUANTITY > 0
GROUP BY CATEGORY 
ORDER BY TOTAL_SELLING_VALUE DESC;

-- 2. WHICH PRODUCTS HAVE EXCESSIVE DISCOUNTS?
SELECT 
    CATEGORY,
    COUNT(*) AS HIGH_DISCOUNT_PRODUCTS,
    ROUND(AVG(DISCOUNT_PERCENT), 2) AS AVG_DISCOUNT,
    ROUND(AVG(MRP), 2) AS AVG_MRP,
    ROUND(AVG(MRP * DISCOUNT_PERCENT/100), 2) AS AVG_DISCOUNT_AMOUNT
FROM PRODUCTS
WHERE DISCOUNT_PERCENT > 30
GROUP BY CATEGORY 
ORDER BY AVG_DISCOUNT DESC;

-- 3. WHICH PRODUCTS ARE OVERSTOCKED VS UNDERSTOCKED?

SELECT 
    DISTINCT NAME,
    MRP,
    AVAILABLE_QUANTITY,
    CASE 
        WHEN AVAILABLE_QUANTITY = 0 THEN 'OUT OF STOCK'
        WHEN AVAILABLE_QUANTITY <= 3 THEN 'LOW STOCK'
        WHEN AVAILABLE_QUANTITY <= 6 THEN 'NORMAL STOCK'
    END AS STOCK_STATUS
FROM PRODUCTS
ORDER BY STOCK_STATUS;

-- 4. WHICH CATEGORIES HAVE THE BEST PROFIT MARGINS?

SELECT 
    CATEGORY,
    ROUND(AVG(MRP), 2) AS AVG_MRP,
    ROUND(AVG(DISCOUNT_PERCENT), 2) AS AVG_DISCOUNT_PERCENT,
    ROUND(AVG(MRP * (1 - DISCOUNT_PERCENT/100)), 2) AS AVG_SELLING_PRICE,
    ROUND(AVG(MRP * DISCOUNT_PERCENT/100), 2) AS AVG_DISCOUNT,
    ROUND((SUM(MRP * DISCOUNT_PERCENT/100*AVAILABLE_QUANTITY) / SUM(MRP*AVAILABLE_QUANTITY)) * 100, 2) AS AVG_MARGIN_PERCENT
FROM PRODUCTS
GROUP BY CATEGORY 
ORDER BY AVG_MARGIN_PERCENT DESC;

-- 5. WHAT'S OUR PRODUCT PORTFOLIO DISTRIBUTION?

SELECT 
    CATEGORY,
    COUNT(*) AS PRODUCT_COUNT,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM PRODUCTS), 2) AS PORTFOLIO_PERCENTAGE,
    SUM(AVAILABLE_QUANTITY) AS TOTAL_INVENTORY_UNITS,
    ROUND(SUM(AVAILABLE_QUANTITY) * 100.0 / (SELECT SUM(AVAILABLE_QUANTITY) FROM PRODUCTS), 2) AS INVENTORY_PERCENTAGE
FROM PRODUCTS
GROUP BY CATEGORY 
ORDER BY PRODUCT_COUNT DESC;

-- 6. WHICH DISCOUNT RANGES DRIVE THE MOST VOLUME?

SELECT 
    CASE 
        WHEN DISCOUNT_PERCENT = 0 THEN '0% (NO DISCOUNT)'
        WHEN DISCOUNT_PERCENT <= 10 THEN '1-10% (LOW)'
        WHEN DISCOUNT_PERCENT <= 25 THEN '11-25% (MEDIUM)'
        WHEN DISCOUNT_PERCENT <= 50 THEN '26-50% (HIGH)'
        ELSE '50%+ (VERY HIGH)'
    END AS DISCOUNT_RANGE,
    COUNT(*) AS PRODUCT_COUNT,
    SUM(AVAILABLE_QUANTITY) AS TOTAL_INVENTORY,
    ROUND(AVG(MRP), 2) AS AVG_MRP,
    ROUND(SUM(MRP * AVAILABLE_QUANTITY), 2) AS TOTAL_POTENTIAL_REVENUE
FROM PRODUCTS
GROUP BY DISCOUNT_RANGE
ORDER BY TOTAL_POTENTIAL_REVENUE DESC;

-- 7. CATEGORY PERFORMANCE COMPARISON: WHICH CATEGORIES ARE UNDERPERFORMING?

SELECT 
    CATEGORY,
    COUNT(*) AS TOTAL_PRODUCTS,
    ROUND(AVG(MRP), 2) AS AVG_PRICE,
    ROUND(AVG(DISCOUNT_PERCENT), 2) AS AVG_DISCOUNT,
    SUM(AVAILABLE_QUANTITY) AS TOTAL_STOCK,
    COUNT(CASE WHEN OUT_OF_STOCK = TRUE THEN 1 END) AS OUT_OF_STOCK_COUNT,
    ROUND(COUNT(CASE WHEN OUT_OF_STOCK = TRUE THEN 1 END) * 100.0 / COUNT(*), 2) AS STOCKOUT_RATE,
    ROUND(SUM(MRP * AVAILABLE_QUANTITY), 0) AS INVENTORY_VALUE
FROM PRODUCTS
GROUP BY CATEGORY 
ORDER BY STOCKOUT_RATE DESC, INVENTORY_VALUE DESC
LIMIT 5;

-- 8. WHAT'S OUR MAXIMUM VS CURRENT REVENUE POTENTIAL?

SELECT 
    CATEGORY,
    COUNT(*) AS PRODUCTS,
    ROUND(SUM(MRP * AVAILABLE_QUANTITY), 2) AS MAX_REVENUE_POTENTIAL,
    ROUND(SUM(MRP * (1 - DISCOUNT_PERCENT/100) * AVAILABLE_QUANTITY), 2) AS CURRENT_REVENUE_POTENTIAL,
    ROUND(SUM(MRP * DISCOUNT_PERCENT/100 * AVAILABLE_QUANTITY), 2) AS REVENUE_LOSS_DUE_TO_DISCOUNTS,
    ROUND((SUM(MRP * DISCOUNT_PERCENT/100 * AVAILABLE_QUANTITY) / SUM(MRP * AVAILABLE_QUANTITY)) * 100, 2) AS REVENUE_LOSS_PERCENTAGE
FROM PRODUCTS
WHERE AVAILABLE_QUANTITY > 0
GROUP BY CATEGORY 
ORDER BY REVENUE_LOSS_DUE_TO_DISCOUNTS DESC;

-- 9. ARE WE BALANCED ACROSS PRICE POINTS?

SELECT 
    CASE 
        WHEN MRP < 15000 THEN 'BUDGET (UNDER ₹15000)'
        WHEN MRP BETWEEN 15000 AND 40000 THEN 'MID-RANGE (₹15000-40000)'
        WHEN MRP BETWEEN 40001 AND 58000 THEN 'PREMIUM (₹40001-58000)'
        ELSE 'LUXURY (ABOVE ₹58000)'
    END AS PRICE_TIER,
    COUNT(*) AS PRODUCT_COUNT,
    GROUP_CONCAT(DISTINCT CATEGORY) AS CATEGORIES_PRESENT,
    ROUND(AVG(AVAILABLE_QUANTITY), 2) AS AVG_INVENTORY,
    ROUND(SUM(MRP * AVAILABLE_QUANTITY), 2) AS TIER_INVENTORY_VALUE
FROM PRODUCTS
GROUP BY PRICE_TIER
ORDER BY TIER_INVENTORY_VALUE DESC;
